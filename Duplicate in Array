//CodeStudio Question Link -> https://www.codingninjas.com/codestudio/problems/duplicate-in-array_893397?challengeSlug=striver-sde-challenge&leftPanelTab=1


//This code has T.C. of O(n^2)
#include <bits/stdc++.h>
int findDuplicate(vector<int> &arr) 
{
    sort(arr.begin(),arr.end());
    int ans=0;
    for(int i=0;i<arr.size()-1;i++){
        if(arr[i]==arr[i+1]){
            ans=arr[i];
            break;
        }
    }
	return ans;
}




//Trying  XOR but it also gives T.C.
#include <bits/stdc++.h>
int findDuplicate(vector<int> &arr) 
{
    sort(arr.begin(),arr.end());
    int ans=0;
    for(int i=0;i<arr.size();i++)
    {
        ans=ans^arr[i];
    }
    for(int i=1;i<arr.size();i++)
    {
        ans=ans^i;
    }
	return ans;
}


//It is more optimised
int findDuplicate(vector<int> &arr)

{ int b=0 ;

for (int j = 0; j < arr.size(); j++) {

b= b+arr[j];

}

int c = b - ( arr.size()*arr.size() - arr.size() )/2 ;

return c;

}


//Try this


    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];
        
        do
        {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);
        
        fast = nums[0];
        while(slow != fast)
        {
            slow = nums[slow];
            fast = nums[fast];
        }
        
        return slow;
    }
